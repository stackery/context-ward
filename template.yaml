AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  startOneNeo4j:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-startOneNeo4j
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: startOneNeo4j
      CodeUri: src/startOneNeo4j
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ecs:StopTask
                - ecs:ListTasks
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt neo4jDockerTaskExecutionRole.Arn
                - !GetAtt neo4jDockerTaskTaskRole.Arn
        - LambdaInvokePolicy:
            FunctionName: !Ref startNeo4j
      Events:
        api4C5FAC75GETstart:
          Type: Api
          Properties:
            Path: /start
            Method: GET
            RestApiId: !Ref manageFargateApi
      Environment:
        Variables:
          DOCKER_TASK_ARN: !Ref neo4jDockerTask
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - !Ref DefaultVPCSubnets
          FUNCTION_NAME: !Ref startNeo4j
          FUNCTION_ARN: !GetAtt startNeo4j.Arn
    Metadata:
      StackeryName: startOneNeo4j
  status:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-status
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: status
      CodeUri: src/status
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ecs:ListTasks
                - ecs:DescribeTasks
                - ec2:DescribeNetworkInterfaces
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt neo4jDockerTaskExecutionRole.Arn
                - !GetAtt neo4jDockerTaskTaskRole.Arn
        - LambdaInvokePolicy:
            FunctionName: !Ref startNeo4j
      Events:
        api4C5FAC75GETstatus:
          Type: Api
          Properties:
            Path: /status
            Method: GET
            RestApiId: !Ref manageFargateApi
      Environment:
        Variables:
          DOCKER_TASK_ARN: !Ref neo4jDockerTask
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - !Ref DefaultVPCSubnets
    Metadata:
      StackeryName: status
  startNeo4j:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-startNeo4j
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: startNeo4j
      CodeUri: src/startNeo4j
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:DescribeTasks
                - ecs:StopTask
              Resource:
                - !Ref neo4jDockerTask
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt neo4jDockerTaskExecutionRole.Arn
                - !GetAtt neo4jDockerTaskTaskRole.Arn
      Environment:
        Variables:
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - !Ref DefaultVPCSubnets
          DOCKER_TASK_ARN: !Ref neo4jDockerTask
          DOCKER_SG: !GetAtt fargateSecurityGroup.GroupId
    Metadata:
      StackeryName: startNeo4j
  stopNeo4j:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-stopNeo4j
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: stopNeo4j
      CodeUri: src/stopNeo4j
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ecs:StopTask
                - ecs:ListTasks
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt neo4jDockerTaskExecutionRole.Arn
                - !GetAtt neo4jDockerTaskTaskRole.Arn
      Environment:
        Variables:
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - !Ref DefaultVPCSubnets
          DOCKER_TASK_ARN: !Ref neo4jDockerTask
      Events:
        api4C5FAC75GETstop:
          Type: Api
          Properties:
            Path: /stop
            Method: GET
            RestApiId: !Ref manageFargateApi
        timer3F72A244:
          Type: Schedule
          Properties:
            Schedule: rate(10 minutes)
          Metadata:
            StackeryName: Every 10 minutes
    Metadata:
      StackeryName: stopNeo4j
  neo4jDockerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: docker.io/samgoldstein/context-db:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref neo4jDockerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: docker-io-samgoldstein-context-db-latest
          PortMappings:
            - ContainerPort: 7474
              HostPort: 7474
              Protocol: tcp
            - ContainerPort: 7473
              HostPort: 7473
              Protocol: tcp
            - ContainerPort: 7687
              HostPort: 7687
              Protocol: tcp
          Name: 0
          Environment: []
      Cpu: 1024
      ExecutionRoleArn: !GetAtt neo4jDockerTaskExecutionRole.Arn
      Memory: 3072
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt neo4jDockerTaskTaskRole.Arn
      Volumes: []
    DependsOn: neo4jDockerTaskLogGroup
  neo4jDockerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  neo4jDockerTaskTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-neo4jDockerTaskTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
  neo4jDockerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-neo4jDockerTask/docker-io-samgoldstein-context-db-latest
  fargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Neo4j Ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 7474
          ToPort: 7474
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7473
          ToPort: 7473
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7687
          ToPort: 7687
          CidrIp: 0.0.0.0/0
  manageFargateApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: manageFargateApi
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /start:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${startOneNeo4j.Arn}/invocations
              responses: {}
          /stop:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${stopNeo4j.Arn}/invocations
              responses: {}
          /status:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${status.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)